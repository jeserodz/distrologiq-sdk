/**
 * Distrologiq
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthApi", () => {
  let instance: api.AuthApi
  beforeEach(function() {
    instance = new api.AuthApi(config)
  });

  test("authControllerSignIn", () => {
    const body: api.SignInDto = undefined
    return expect(instance.authControllerSignIn(body, {})).resolves.toBe(null)
  })
  test("authControllerVerifyAccessToken", () => {
    return expect(instance.authControllerVerifyAccessToken({})).resolves.toBe(null)
  })
})

describe("DestinationsApi", () => {
  let instance: api.DestinationsApi
  beforeEach(function() {
    instance = new api.DestinationsApi(config)
  });

  test("destinationsControllerCreate", () => {
    const body: api.CreateDestinationDTO = undefined
    return expect(instance.destinationsControllerCreate(body, {})).resolves.toBe(null)
  })
  test("destinationsControllerDestroy", () => {
    const id: number = 1.2
    return expect(instance.destinationsControllerDestroy(id, {})).resolves.toBe(null)
  })
  test("destinationsControllerIndex", () => {
    return expect(instance.destinationsControllerIndex({})).resolves.toBe(null)
  })
  test("destinationsControllerShow", () => {
    const id: number = 1.2
    return expect(instance.destinationsControllerShow(id, {})).resolves.toBe(null)
  })
  test("destinationsControllerUpdate", () => {
    const body: api.UpdateDestinationDTO = undefined
    const id: number = 1.2
    return expect(instance.destinationsControllerUpdate(body, id, {})).resolves.toBe(null)
  })
})

describe("MapsApi", () => {
  let instance: api.MapsApi
  beforeEach(function() {
    instance = new api.MapsApi(config)
  });

  test("mapsControllerCalculateRoute", () => {
    const body: api.CalculateRouteDTO = undefined
    return expect(instance.mapsControllerCalculateRoute(body, {})).resolves.toBe(null)
  })
  test("mapsControllerSearchPlaces", () => {
    const search: string = "search_example"
    return expect(instance.mapsControllerSearchPlaces(search, {})).resolves.toBe(null)
  })
})

describe("RoutesApi", () => {
  let instance: api.RoutesApi
  beforeEach(function() {
    instance = new api.RoutesApi(config)
  });

  test("create", () => {
    const body: api.CreateRouteDTO = undefined
    return expect(instance.create(body, {})).resolves.toBe(null)
  })
  test("routesControllerAssignedRoutes", () => {
    const userId: number = 1.2
    return expect(instance.routesControllerAssignedRoutes(userId, {})).resolves.toBe(null)
  })
  test("routesControllerCompleteRouteStop", () => {
    const body: api.CompleteRouteStopDTO = undefined
    const id: number = 1.2
    return expect(instance.routesControllerCompleteRouteStop(body, id, {})).resolves.toBe(null)
  })
  test("routesControllerDestroy", () => {
    const id: number = 1.2
    return expect(instance.routesControllerDestroy(id, {})).resolves.toBe(null)
  })
  test("routesControllerGetRouteStop", () => {
    const id: number = 1.2
    return expect(instance.routesControllerGetRouteStop(id, {})).resolves.toBe(null)
  })
  test("routesControllerIndex", () => {
    return expect(instance.routesControllerIndex({})).resolves.toBe(null)
  })
  test("routesControllerShow", () => {
    const id: number = 1.2
    return expect(instance.routesControllerShow(id, {})).resolves.toBe(null)
  })
  test("routesControllerStartRouteStop", () => {
    const body: api.StartRouteStopDTO = undefined
    const id: number = 1.2
    return expect(instance.routesControllerStartRouteStop(body, id, {})).resolves.toBe(null)
  })
  test("routesControllerUpdate", () => {
    const body: api.UpdateRouteDTO = undefined
    const id: number = 1.2
    return expect(instance.routesControllerUpdate(body, id, {})).resolves.toBe(null)
  })
})

describe("SettingsApi", () => {
  let instance: api.SettingsApi
  beforeEach(function() {
    instance = new api.SettingsApi(config)
  });

  test("settingsControllerIndex", () => {
    return expect(instance.settingsControllerIndex({})).resolves.toBe(null)
  })
  test("settingsControllerSetSettings", () => {
    const body: api.SetSettingsDTO = undefined
    return expect(instance.settingsControllerSetSettings(body, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("create", () => {
    const body: api.CreateUserDTO = undefined
    return expect(instance.create(body, {})).resolves.toBe(null)
  })
  test("usersControllerDestroy", () => {
    const id: number = 1.2
    return expect(instance.usersControllerDestroy(id, {})).resolves.toBe(null)
  })
  test("usersControllerIndex", () => {
    return expect(instance.usersControllerIndex({})).resolves.toBe(null)
  })
  test("usersControllerShow", () => {
    const id: number = 1.2
    return expect(instance.usersControllerShow(id, {})).resolves.toBe(null)
  })
  test("usersControllerUpdate", () => {
    const id: number = 1.2
    return expect(instance.usersControllerUpdate(id, {})).resolves.toBe(null)
  })
})

