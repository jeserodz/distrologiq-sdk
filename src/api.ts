/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Distrologiq
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CalculateRouteDTO
 */
export interface CalculateRouteDTO {
    /**
     * 
     * @type {Array<RouteStop>}
     * @memberof CalculateRouteDTO
     */
    routeStops: Array<RouteStop>;
}
/**
 * 
 * @export
 * @interface CalculateRouteResponse
 */
export interface CalculateRouteResponse {
    /**
     * 
     * @type {number}
     * @memberof CalculateRouteResponse
     */
    distance: number;
    /**
     * 
     * @type {number}
     * @memberof CalculateRouteResponse
     */
    duration: number;
    /**
     * 
     * @type {number}
     * @memberof CalculateRouteResponse
     */
    durationWithLoadTime: number;
    /**
     * 
     * @type {RouteGeometry}
     * @memberof CalculateRouteResponse
     */
    geometry: RouteGeometry;
    /**
     * 
     * @type {Array<RouteStop>}
     * @memberof CalculateRouteResponse
     */
    optimizedRouteStops: Array<RouteStop>;
}
/**
 * 
 * @export
 * @interface CompleteRouteStopDTO
 */
export interface CompleteRouteStopDTO {
    /**
     * 
     * @type {number}
     * @memberof CompleteRouteStopDTO
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof CompleteRouteStopDTO
     */
    completionDatetime: Date;
}
/**
 * 
 * @export
 * @interface CreateDestinationDTO
 */
export interface CreateDestinationDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateDestinationDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDestinationDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDestinationDTO
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDestinationDTO
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDestinationDTO
     */
    references: string;
    /**
     * 
     * @type {number}
     * @memberof CreateDestinationDTO
     */
    longitude: number;
    /**
     * 
     * @type {number}
     * @memberof CreateDestinationDTO
     */
    latitude: number;
}
/**
 * 
 * @export
 * @interface CreateRouteDTO
 */
export interface CreateRouteDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateRouteDTO
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof CreateRouteDTO
     */
    distance: number;
    /**
     * 
     * @type {number}
     * @memberof CreateRouteDTO
     */
    duration: number;
    /**
     * 
     * @type {number}
     * @memberof CreateRouteDTO
     */
    durationWithLoadTime: number;
    /**
     * 
     * @type {RouteGeometry}
     * @memberof CreateRouteDTO
     */
    geometry: RouteGeometry;
    /**
     * 
     * @type {Array<RouteStop>}
     * @memberof CreateRouteDTO
     */
    stops: Array<RouteStop>;
    /**
     * 
     * @type {User}
     * @memberof CreateRouteDTO
     */
    driver?: User;
}
/**
 * 
 * @export
 * @interface CreateUserDTO
 */
export interface CreateUserDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface Destination
 */
export interface Destination {
    /**
     * 
     * @type {number}
     * @memberof Destination
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    references: string;
    /**
     * 
     * @type {number}
     * @memberof Destination
     */
    longitude: number;
    /**
     * 
     * @type {number}
     * @memberof Destination
     */
    latitude: number;
    /**
     * 
     * @type {boolean}
     * @memberof Destination
     */
    isOwnCompany: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Destination
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Destination
     */
    updatedAt: Date;
}
/**
 * 
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    latitude: number;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    longitude: number;
}
/**
 * 
 * @export
 * @interface Route
 */
export interface Route {
    /**
     * 
     * @type {number}
     * @memberof Route
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Route
     */
    distance: number;
    /**
     * 
     * @type {number}
     * @memberof Route
     */
    duration: number;
    /**
     * 
     * @type {number}
     * @memberof Route
     */
    durationWithLoadTime: number;
    /**
     * 
     * @type {RouteGeometry}
     * @memberof Route
     */
    geometry: RouteGeometry;
    /**
     * 
     * @type {Date}
     * @memberof Route
     */
    started: Date;
    /**
     * 
     * @type {Date}
     * @memberof Route
     */
    completed: Date;
    /**
     * 
     * @type {number}
     * @memberof Route
     */
    completedDuration: number;
    /**
     * 
     * @type {Array<RouteStop>}
     * @memberof Route
     */
    stops: Array<RouteStop>;
    /**
     * 
     * @type {User}
     * @memberof Route
     */
    driver: User;
    /**
     * 
     * @type {Date}
     * @memberof Route
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Route
     */
    updatedAt: Date;
}
/**
 * 
 * @export
 * @interface RouteGeometry
 */
export interface RouteGeometry {
    /**
     * 
     * @type {string}
     * @memberof RouteGeometry
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof RouteGeometry
     */
    coordinates: string;
}
/**
 * 
 * @export
 * @interface RouteStop
 */
export interface RouteStop {
    /**
     * 
     * @type {number}
     * @memberof RouteStop
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RouteStop
     */
    type: RouteStop.TypeEnum;
    /**
     * 
     * @type {Destination}
     * @memberof RouteStop
     */
    destination: Destination;
    /**
     * 
     * @type {Route}
     * @memberof RouteStop
     */
    route: Route;
    /**
     * 
     * @type {number}
     * @memberof RouteStop
     */
    waypointIndex: number;
    /**
     * 
     * @type {Date}
     * @memberof RouteStop
     */
    started: Date;
    /**
     * 
     * @type {Date}
     * @memberof RouteStop
     */
    completed: Date;
    /**
     * 
     * @type {Date}
     * @memberof RouteStop
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RouteStop
     */
    updatedAt: Date;
}

/**
 * @export
 * @namespace RouteStop
 */
export namespace RouteStop {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        DELIVERY = <any> 'DELIVERY',
        PICKUP = <any> 'PICKUP',
        DELIVERYPICKUP = <any> 'DELIVERY_PICKUP',
        ARRIVAL = <any> 'ARRIVAL'
    }
}
/**
 * 
 * @export
 * @interface SearchPlacesResponse
 */
export interface SearchPlacesResponse {
    /**
     * 
     * @type {Array<Place>}
     * @memberof SearchPlacesResponse
     */
    places: Array<Place>;
}
/**
 * 
 * @export
 * @interface SetSettingsDTO
 */
export interface SetSettingsDTO {
    /**
     * 
     * @type {string}
     * @memberof SetSettingsDTO
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof SetSettingsDTO
     */
    avgLoadTime: number;
    /**
     * 
     * @type {number}
     * @memberof SetSettingsDTO
     */
    longitude: number;
    /**
     * 
     * @type {number}
     * @memberof SetSettingsDTO
     */
    latitude: number;
}
/**
 * 
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    avgLoadTime: number;
    /**
     * 
     * @type {Destination}
     * @memberof Settings
     */
    destination: Destination;
    /**
     * 
     * @type {Date}
     * @memberof Settings
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Settings
     */
    updatedAt: Date;
}
/**
 * 
 * @export
 * @interface SignInDto
 */
export interface SignInDto {
    /**
     * 
     * @type {string}
     * @memberof SignInDto
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SignInDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface SignInResponseDTO
 */
export interface SignInResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof SignInResponseDTO
     */
    accessToken: string;
}
/**
 * 
 * @export
 * @interface StartRouteStopDTO
 */
export interface StartRouteStopDTO {
    /**
     * 
     * @type {number}
     * @memberof StartRouteStopDTO
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof StartRouteStopDTO
     */
    startDatetime: Date;
}
/**
 * 
 * @export
 * @interface UpdateDestinationDTO
 */
export interface UpdateDestinationDTO {
    /**
     * 
     * @type {number}
     * @memberof UpdateDestinationDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateDestinationDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDestinationDTO
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDestinationDTO
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDestinationDTO
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDestinationDTO
     */
    references?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateDestinationDTO
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateDestinationDTO
     */
    latitude?: number;
}
/**
 * 
 * @export
 * @interface UpdateRouteDTO
 */
export interface UpdateRouteDTO {
    /**
     * 
     * @type {number}
     * @memberof UpdateRouteDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateRouteDTO
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateRouteDTO
     */
    distance: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateRouteDTO
     */
    duration: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateRouteDTO
     */
    durationWithLoadTime: number;
    /**
     * 
     * @type {RouteGeometry}
     * @memberof UpdateRouteDTO
     */
    geometry: RouteGeometry;
    /**
     * 
     * @type {Date}
     * @memberof UpdateRouteDTO
     */
    started: Date;
    /**
     * 
     * @type {Date}
     * @memberof UpdateRouteDTO
     */
    completed: Date;
    /**
     * 
     * @type {number}
     * @memberof UpdateRouteDTO
     */
    completedDuration: number;
    /**
     * 
     * @type {Array<RouteStop>}
     * @memberof UpdateRouteDTO
     */
    stops: Array<RouteStop>;
    /**
     * 
     * @type {User}
     * @memberof UpdateRouteDTO
     */
    driver: User;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    roles: any;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    updatedAt: string;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SignInDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(body: SignInDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerSignIn.');
            }
            const localVarPath = `/auth/signIn`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignInDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyAccessToken(options: any = {}): FetchArgs {
            const localVarPath = `/auth/verifyAccessToken`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SignInDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(body: SignInDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignInResponseDTO> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerSignIn(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyAccessToken(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerVerifyAccessToken(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {SignInDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(body: SignInDto, options?: any) {
            return AuthApiFp(configuration).authControllerSignIn(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyAccessToken(options?: any) {
            return AuthApiFp(configuration).authControllerVerifyAccessToken(options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {SignInDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignIn(body: SignInDto, options?: any) {
        return AuthApiFp(this.configuration).authControllerSignIn(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerVerifyAccessToken(options?: any) {
        return AuthApiFp(this.configuration).authControllerVerifyAccessToken(options)(this.fetch, this.basePath);
    }

}
/**
 * DestinationsApi - fetch parameter creator
 * @export
 */
export const DestinationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateDestinationDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerCreate(body: CreateDestinationDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling destinationsControllerCreate.');
            }
            const localVarPath = `/destinations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateDestinationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerDestroy(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling destinationsControllerDestroy.');
            }
            const localVarPath = `/destinations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerIndex(options: any = {}): FetchArgs {
            const localVarPath = `/destinations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerShow(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling destinationsControllerShow.');
            }
            const localVarPath = `/destinations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateDestinationDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerUpdate(body: UpdateDestinationDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling destinationsControllerUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling destinationsControllerUpdate.');
            }
            const localVarPath = `/destinations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateDestinationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DestinationsApi - functional programming interface
 * @export
 */
export const DestinationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateDestinationDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerCreate(body: CreateDestinationDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Destination> {
            const localVarFetchArgs = DestinationsApiFetchParamCreator(configuration).destinationsControllerCreate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerDestroy(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DestinationsApiFetchParamCreator(configuration).destinationsControllerDestroy(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerIndex(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Destination>> {
            const localVarFetchArgs = DestinationsApiFetchParamCreator(configuration).destinationsControllerIndex(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerShow(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Destination> {
            const localVarFetchArgs = DestinationsApiFetchParamCreator(configuration).destinationsControllerShow(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateDestinationDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerUpdate(body: UpdateDestinationDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Destination> {
            const localVarFetchArgs = DestinationsApiFetchParamCreator(configuration).destinationsControllerUpdate(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DestinationsApi - factory interface
 * @export
 */
export const DestinationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CreateDestinationDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerCreate(body: CreateDestinationDTO, options?: any) {
            return DestinationsApiFp(configuration).destinationsControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerDestroy(id: number, options?: any) {
            return DestinationsApiFp(configuration).destinationsControllerDestroy(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerIndex(options?: any) {
            return DestinationsApiFp(configuration).destinationsControllerIndex(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerShow(id: number, options?: any) {
            return DestinationsApiFp(configuration).destinationsControllerShow(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateDestinationDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerUpdate(body: UpdateDestinationDTO, id: number, options?: any) {
            return DestinationsApiFp(configuration).destinationsControllerUpdate(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * DestinationsApi - object-oriented interface
 * @export
 * @class DestinationsApi
 * @extends {BaseAPI}
 */
export class DestinationsApi extends BaseAPI {
    /**
     * 
     * @param {CreateDestinationDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DestinationsApi
     */
    public destinationsControllerCreate(body: CreateDestinationDTO, options?: any) {
        return DestinationsApiFp(this.configuration).destinationsControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DestinationsApi
     */
    public destinationsControllerDestroy(id: number, options?: any) {
        return DestinationsApiFp(this.configuration).destinationsControllerDestroy(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DestinationsApi
     */
    public destinationsControllerIndex(options?: any) {
        return DestinationsApiFp(this.configuration).destinationsControllerIndex(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DestinationsApi
     */
    public destinationsControllerShow(id: number, options?: any) {
        return DestinationsApiFp(this.configuration).destinationsControllerShow(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateDestinationDTO} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DestinationsApi
     */
    public destinationsControllerUpdate(body: UpdateDestinationDTO, id: number, options?: any) {
        return DestinationsApiFp(this.configuration).destinationsControllerUpdate(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * MapsApi - fetch parameter creator
 * @export
 */
export const MapsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CalculateRouteDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapsControllerCalculateRoute(body: CalculateRouteDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mapsControllerCalculateRoute.');
            }
            const localVarPath = `/maps/calculateRoute`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CalculateRouteDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapsControllerSearchPlaces(search: string, options: any = {}): FetchArgs {
            // verify required parameter 'search' is not null or undefined
            if (search === null || search === undefined) {
                throw new RequiredError('search','Required parameter search was null or undefined when calling mapsControllerSearchPlaces.');
            }
            const localVarPath = `/maps/searchPlaces`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MapsApi - functional programming interface
 * @export
 */
export const MapsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CalculateRouteDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapsControllerCalculateRoute(body: CalculateRouteDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CalculateRouteResponse> {
            const localVarFetchArgs = MapsApiFetchParamCreator(configuration).mapsControllerCalculateRoute(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapsControllerSearchPlaces(search: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchPlacesResponse> {
            const localVarFetchArgs = MapsApiFetchParamCreator(configuration).mapsControllerSearchPlaces(search, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MapsApi - factory interface
 * @export
 */
export const MapsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CalculateRouteDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapsControllerCalculateRoute(body: CalculateRouteDTO, options?: any) {
            return MapsApiFp(configuration).mapsControllerCalculateRoute(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapsControllerSearchPlaces(search: string, options?: any) {
            return MapsApiFp(configuration).mapsControllerSearchPlaces(search, options)(fetch, basePath);
        },
    };
};

/**
 * MapsApi - object-oriented interface
 * @export
 * @class MapsApi
 * @extends {BaseAPI}
 */
export class MapsApi extends BaseAPI {
    /**
     * 
     * @param {CalculateRouteDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapsApi
     */
    public mapsControllerCalculateRoute(body: CalculateRouteDTO, options?: any) {
        return MapsApiFp(this.configuration).mapsControllerCalculateRoute(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} search 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MapsApi
     */
    public mapsControllerSearchPlaces(search: string, options?: any) {
        return MapsApiFp(this.configuration).mapsControllerSearchPlaces(search, options)(this.fetch, this.basePath);
    }

}
/**
 * RoutesApi - fetch parameter creator
 * @export
 */
export const RoutesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateRouteDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CreateRouteDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/routes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateRouteDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerAssignedRoutes(userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling routesControllerAssignedRoutes.');
            }
            const localVarPath = `/routes/assigned_to_user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CompleteRouteStopDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerCompleteRouteStop(body: CompleteRouteStopDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling routesControllerCompleteRouteStop.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling routesControllerCompleteRouteStop.');
            }
            const localVarPath = `/routes/stops/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CompleteRouteStopDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerDestroy(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling routesControllerDestroy.');
            }
            const localVarPath = `/routes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerGetRouteStop(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling routesControllerGetRouteStop.');
            }
            const localVarPath = `/routes/stops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerIndex(options: any = {}): FetchArgs {
            const localVarPath = `/routes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerShow(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling routesControllerShow.');
            }
            const localVarPath = `/routes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StartRouteStopDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerStartRouteStop(body: StartRouteStopDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling routesControllerStartRouteStop.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling routesControllerStartRouteStop.');
            }
            const localVarPath = `/routes/stops/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"StartRouteStopDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateRouteDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerUpdate(body: UpdateRouteDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling routesControllerUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling routesControllerUpdate.');
            }
            const localVarPath = `/routes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateRouteDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoutesApi - functional programming interface
 * @export
 */
export const RoutesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateRouteDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CreateRouteDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Route> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerAssignedRoutes(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Route>> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).routesControllerAssignedRoutes(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CompleteRouteStopDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerCompleteRouteStop(body: CompleteRouteStopDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RouteStop> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).routesControllerCompleteRouteStop(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerDestroy(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).routesControllerDestroy(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerGetRouteStop(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RouteStop> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).routesControllerGetRouteStop(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerIndex(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Route>> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).routesControllerIndex(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerShow(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Route> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).routesControllerShow(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {StartRouteStopDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerStartRouteStop(body: StartRouteStopDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RouteStop> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).routesControllerStartRouteStop(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateRouteDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerUpdate(body: UpdateRouteDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Route> {
            const localVarFetchArgs = RoutesApiFetchParamCreator(configuration).routesControllerUpdate(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RoutesApi - factory interface
 * @export
 */
export const RoutesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CreateRouteDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CreateRouteDTO, options?: any) {
            return RoutesApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerAssignedRoutes(userId: number, options?: any) {
            return RoutesApiFp(configuration).routesControllerAssignedRoutes(userId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CompleteRouteStopDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerCompleteRouteStop(body: CompleteRouteStopDTO, id: number, options?: any) {
            return RoutesApiFp(configuration).routesControllerCompleteRouteStop(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerDestroy(id: number, options?: any) {
            return RoutesApiFp(configuration).routesControllerDestroy(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerGetRouteStop(id: number, options?: any) {
            return RoutesApiFp(configuration).routesControllerGetRouteStop(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerIndex(options?: any) {
            return RoutesApiFp(configuration).routesControllerIndex(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerShow(id: number, options?: any) {
            return RoutesApiFp(configuration).routesControllerShow(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {StartRouteStopDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerStartRouteStop(body: StartRouteStopDTO, id: number, options?: any) {
            return RoutesApiFp(configuration).routesControllerStartRouteStop(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateRouteDTO} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routesControllerUpdate(body: UpdateRouteDTO, id: number, options?: any) {
            return RoutesApiFp(configuration).routesControllerUpdate(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * RoutesApi - object-oriented interface
 * @export
 * @class RoutesApi
 * @extends {BaseAPI}
 */
export class RoutesApi extends BaseAPI {
    /**
     * 
     * @param {CreateRouteDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public create(body: CreateRouteDTO, options?: any) {
        return RoutesApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public routesControllerAssignedRoutes(userId: number, options?: any) {
        return RoutesApiFp(this.configuration).routesControllerAssignedRoutes(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CompleteRouteStopDTO} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public routesControllerCompleteRouteStop(body: CompleteRouteStopDTO, id: number, options?: any) {
        return RoutesApiFp(this.configuration).routesControllerCompleteRouteStop(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public routesControllerDestroy(id: number, options?: any) {
        return RoutesApiFp(this.configuration).routesControllerDestroy(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public routesControllerGetRouteStop(id: number, options?: any) {
        return RoutesApiFp(this.configuration).routesControllerGetRouteStop(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public routesControllerIndex(options?: any) {
        return RoutesApiFp(this.configuration).routesControllerIndex(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public routesControllerShow(id: number, options?: any) {
        return RoutesApiFp(this.configuration).routesControllerShow(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {StartRouteStopDTO} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public routesControllerStartRouteStop(body: StartRouteStopDTO, id: number, options?: any) {
        return RoutesApiFp(this.configuration).routesControllerStartRouteStop(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateRouteDTO} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public routesControllerUpdate(body: UpdateRouteDTO, id: number, options?: any) {
        return RoutesApiFp(this.configuration).routesControllerUpdate(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * SettingsApi - fetch parameter creator
 * @export
 */
export const SettingsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerIndex(options: any = {}): FetchArgs {
            const localVarPath = `/settings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SetSettingsDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerSetSettings(body: SetSettingsDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling settingsControllerSetSettings.');
            }
            const localVarPath = `/settings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SetSettingsDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerIndex(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Settings> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).settingsControllerIndex(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {SetSettingsDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerSetSettings(body: SetSettingsDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Settings> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).settingsControllerSetSettings(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerIndex(options?: any) {
            return SettingsApiFp(configuration).settingsControllerIndex(options)(fetch, basePath);
        },
        /**
         * 
         * @param {SetSettingsDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerSetSettings(body: SetSettingsDTO, options?: any) {
            return SettingsApiFp(configuration).settingsControllerSetSettings(body, options)(fetch, basePath);
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerIndex(options?: any) {
        return SettingsApiFp(this.configuration).settingsControllerIndex(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {SetSettingsDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerSetSettings(body: SetSettingsDTO, options?: any) {
        return SettingsApiFp(this.configuration).settingsControllerSetSettings(body, options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CreateUserDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateUserDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDestroy(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerDestroy.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerIndex(options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerShow(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerShow.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerUpdate.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CreateUserDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDestroy(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerDestroy(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerIndex(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerIndex(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerShow(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerShow(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerUpdate(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CreateUserDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: CreateUserDTO, options?: any) {
            return UsersApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDestroy(id: number, options?: any) {
            return UsersApiFp(configuration).usersControllerDestroy(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerIndex(options?: any) {
            return UsersApiFp(configuration).usersControllerIndex(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerShow(id: number, options?: any) {
            return UsersApiFp(configuration).usersControllerShow(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: number, options?: any) {
            return UsersApiFp(configuration).usersControllerUpdate(id, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public create(body: CreateUserDTO, options?: any) {
        return UsersApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerDestroy(id: number, options?: any) {
        return UsersApiFp(this.configuration).usersControllerDestroy(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerIndex(options?: any) {
        return UsersApiFp(this.configuration).usersControllerIndex(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerShow(id: number, options?: any) {
        return UsersApiFp(this.configuration).usersControllerShow(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdate(id: number, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUpdate(id, options)(this.fetch, this.basePath);
    }

}
